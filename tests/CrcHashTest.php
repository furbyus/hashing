<?php

use Furbyus\Hashing\Crc\CrcFinalXor;
use Furbyus\Hashing\Crc\CrcPolynomials;
use Furbyus\Hashing\Crc\CrcInitialValue;
use Furbyus\Hashing\Crc\Crc;

final class CrcHashTest extends \PHPUnit\Framework\TestCase
{
    public function testCanGenerateCustomCrc32tsBinaryHash(): void
    {
        $byteArray = [0x4F, 0x67, 0x67, 0x53, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x1D, 0x12, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1E, 0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73, 0x00, 0x00, 0x00, 0x00, 0x02, 0x44, 0xAC, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE2, 0x04, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xB8, 0x01];
        $expectedResult = 3083421466;
        $binResult = Crc::crcSum($byteArray, 32, CrcPolynomials::CRC_32_TS, CrcInitialValue::CRC_32_TS, CrcFinalXor::CRC_32_TS);
        $this->assertSame($expectedResult, $binResult);
    }
    public function testCanGenerateCustomCrc16BinaryHash(): void
    {
        $byteArray = [0x4F, 0x67, 0x67, 0x53, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x1D, 0x12, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1E, 0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73, 0x00, 0x00, 0x00, 0x00, 0x02, 0x44, 0xAC, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE2, 0x04, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xB8, 0x01];
        $expectedResult = 5528;
        $binResult = Crc::crcSum($byteArray, 16, CrcPolynomials::CRC_16_CCITT, CrcInitialValue::CRC_16_CCITT, CrcFinalXor::CRC_16_CCITT);
        $this->assertSame($expectedResult, $binResult);
    }
    public function testCannotGenerateCustomCrc64BinaryHash(): void
    {
        $byteArray = [0x4F, 0x67, 0x67, 0x53, 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xD9, 0x1D, 0x12, 0xC8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x1E, 0x01, 0x76, 0x6F, 0x72, 0x62, 0x69, 0x73, 0x00, 0x00, 0x00, 0x00, 0x02, 0x44, 0xAC, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0x00, 0xE2, 0x04, 0x00, 0xFF, 0xFF, 0xFF, 0xFF, 0xB8, 0x01];
        if(!function_exists("gmp_intval") || !function_exists("bcmod")){
            $this->expectException(\InvalidArgumentException::class);
        }
        $binResult = Crc::crcSum($byteArray, 64, CrcPolynomials::CRC_64_ISO, CrcInitialValue::CRC_64_ISO, CrcFinalXor::CRC_64_ISO);
    }

}